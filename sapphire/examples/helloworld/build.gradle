import dcap.sapphire.gradle.PolicyStubGenerationTask
apply plugin: 'java-library'

dependencies {
    compile project(':sapphire-core')
}

// Task for Stub compilation
task compileStubs(type: JavaCompile) {
    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.compileClasspath
    destinationDir = sourceSets.main.output.classesDir
    options.incremental = true
}

// Task for app stub generation
task genAppStubs(type: JavaExec) {
    main = "sapphire.compiler.StubGenerator"
    classpath = sourceSets.main.runtimeClasspath
    def pkgName = 'sapphire.appexamples.helloworld'
    def src = "$buildDir/classes/java/main/sapphire/appexamples/helloworld/"
    def dst = "src/main/java/sapphire/appexamples/helloworld/stubs/"
    args src, pkgName, dst 
}

genAppStubs.mustRunAfter compileJava
compileStubs.dependsOn genAppStubs
jar.dependsOn compileStubs

task runHelloWorldOms(type: JavaExec) {
    dependsOn jar
    classpath = sourceSets.main.runtimeClasspath
    main = 'sapphire.oms.OMSServerImpl'
    args project.property('omsIp'), project.property('omsPort')
}

task runHelloWorldKernelServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'sapphire.kernel.server.KernelServerImpl'
    args project.property('kernelServerIp'), project.property('kernelServerPort'), project.property('omsIp'), project.property('omsPort')
}

// Task for run HelloWorld demo app
// Usage: gradlew runHelloWorld -PW=DisneyWorld
task runHelloWorld(type: JavaExec) {
    main = "sapphire.appexamples.helloworld.HelloWorldMain"
    classpath = sourceSets.main.runtimeClasspath
    args project.property('omsIp'), project.property('omsPort'), project.property('kernelIpAndroid'), project.property('kernelServerPort'), project.hasProperty('W') ? project.property('W') : "DCAP World"
}
