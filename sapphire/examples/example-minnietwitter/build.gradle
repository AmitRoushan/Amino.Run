buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:2.6.5'
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

plugins {
    id "de.qaware.cloud.deployer" version "0.9.2"
}

apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'com.android.library'

repositories {
    mavenCentral()
}

android {
// Terry: It is safe to delete the following two settings. But
// I would like to keep them here as comment temporarily to 
// remind myself that it used to take parameters from parent
// projects. I will remove them eventually.
//    compileSdkVersion project.ext.compileSdkVersion.toInteger()
//    buildToolsVersion project.ext.buildToolsVersion
    compileSdkVersion = 27
    buildToolsVersion = "27.0.2"

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    defaultConfig {
        versionCode 1
        versionName "1.0"
        minSdkVersion 24
        targetSdkVersion 27
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    dexOptions {
        preDexLibraries = false
        additionalParameters = ["--core-library"]
    }
}

dependencies {
    compile 'com.android.support:support-v4:27.0.2'
    compile project(':sapphire-core')
}

task copyScripts(type: Copy){
    mkdir "$projectDir/scripts/"
    from "${projectDir}/../k8s-deployment/common/"
    into "$projectDir/scripts/"
}

task copyJar(type: Copy) {
    dependsOn copyScripts
    mkdir "$projectDir/jars/"
    from "${projectDir}/../../sapphire-core/build/libs/sapphire-core-1.0.0.jar"
    from "${projectDir}/../../dependencies/apache.harmony/build/libs/apache.harmony-1.0.0.jar"
    from "${projectDir}/../../dependencies/java.rmi/build/libs/java.rmi-1.0.0.jar"
    from "${projectDir}/build/intermediates/bundles/debug/classes.jar"
    into "$projectDir/jars/"
}

task buildMinnieDockerImage(type: DockerBuildImage) {
    dependsOn copyJar
    url = 'unix:///var/run/docker.sock'
    inputDir = file('.')
    tag = 'minnietwitter'
}

deployer {
    kubernetes {
        id = "kubernetes"
        baseUrl = "http://127.0.0.1:32786/"
        namespace = "default"
        strategy = "UPDATE"
        auth {
            username = "admin"
            password = "s3cr3t"
        }
        ssl {
            trustAll = true
        }
        files = [file("oms-minnietwitter.yml"), file("kernelserver-minnietwitter.yml"), file("minnietwitter-app.yml")]
    }
}

task tagImage (type: Exec){
    dependsOn buildMinnieDockerImage
    commandLine 'docker', 'tag',  "minnietwitter:latest", "preethi95/minnietwitter:new1"
}

task pushImage(type: Exec) {
    dependsOn tagImage
    commandLine 'docker', 'push', "preethi95/minnietwitter:new1"
}

subprojects {
    apply plugin: 'java-library'

    dependencies {
        compile project(':sapphire-core')
    }

    task copyClasses(type: Copy) {
        from "$projectDir.parent/build/intermediates/classes/debug/"
        into 'build/classes/java/main/'
    }

    // Task for Stub compilation
    task compileMinnieTwitterStubs(type: JavaCompile) {
        source = sourceSets.main.java.srcDirs
        classpath = sourceSets.main.compileClasspath
        destinationDir = sourceSets.main.output.classesDir
        options.incremental = true
    }

    // Task for Stub generation
    task genMinnieTwitterStubs(type: JavaExec) {
        main = "sapphire.compiler.StubGenerator"
        classpath = sourceSets.main.runtimeClasspath
        def pkgName = 'sapphire.appexamples.minnietwitter.app'
        def src = "$projectDir.parent/build/intermediates/classes/debug/sapphire/appexamples/minnietwitter/app/"
        def dst = "$projectDir.parent/src/main/java/sapphire/appexamples/minnietwitter/app/stubs/"
        args src, pkgName, dst
    }
    genMinnieTwitterStubs.mustRunAfter compileJava
    genMinnieTwitterStubs.dependsOn copyClasses
    compileMinnieTwitterStubs.dependsOn genMinnieTwitterStubs
    jar.dependsOn compileMinnieTwitterStubs
}